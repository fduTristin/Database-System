# Generated by Django 4.1 on 2023-05-17 14:11

import backend.models
import django.contrib.auth.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="BooksInStockView",
            fields=[
                (
                    "stock_id",
                    models.IntegerField(
                        primary_key=True, serialize=False, verbose_name="stock_id"
                    ),
                ),
                ("book_id", models.IntegerField(verbose_name="书籍编号")),
                ("count", models.SmallIntegerField(verbose_name="库存数量")),
                (
                    "ISBN",
                    models.CharField(max_length=16, unique=True, verbose_name="ISBN"),
                ),
                ("bookname", models.CharField(max_length=40, verbose_name="书名")),
                (
                    "inventory_location",
                    models.CharField(max_length=20, verbose_name="库存位置"),
                ),
                ("author", models.CharField(max_length=40, verbose_name="作者")),
                ("publisher", models.CharField(max_length=40, verbose_name="出版社")),
                (
                    "retail_price",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="零售价"
                    ),
                ),
                (
                    "genre",
                    models.CharField(
                        default="未分类", max_length=30, verbose_name="内容体裁"
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        default="平装", max_length=10, verbose_name="书籍格式"
                    ),
                ),
                ("img", models.ImageField(upload_to="books/", verbose_name="封面")),
            ],
            options={
                "verbose_name": "BooksInStockView",
                "verbose_name_plural": "BooksInStockView",
                "db_table": "view_books_in_stock",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BooksView",
            fields=[
                ("stock_id", models.IntegerField(null=True, verbose_name="stock_id")),
                (
                    "book_id",
                    models.IntegerField(
                        primary_key=True, serialize=False, verbose_name="书籍编号"
                    ),
                ),
                ("count", models.SmallIntegerField(null=True, verbose_name="库存数量")),
                (
                    "ISBN",
                    models.CharField(max_length=16, unique=True, verbose_name="ISBN"),
                ),
                ("bookname", models.CharField(max_length=40, verbose_name="书名")),
                (
                    "inventory_location",
                    models.CharField(max_length=20, null=True, verbose_name="库存位置"),
                ),
                ("author", models.CharField(max_length=40, verbose_name="作者")),
                ("publisher", models.CharField(max_length=40, verbose_name="出版社")),
                (
                    "retail_price",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="零售价"
                    ),
                ),
                (
                    "genre",
                    models.CharField(
                        default="未分类", max_length=30, verbose_name="内容体裁"
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        default="平装", max_length=10, verbose_name="书籍格式"
                    ),
                ),
                ("img", models.ImageField(upload_to="books/", verbose_name="封面")),
            ],
            options={
                "verbose_name": "BooksInStockView",
                "verbose_name_plural": "BooksInStockView",
                "db_table": "view_books",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="FinancialView",
            fields=[
                (
                    "fin_id",
                    models.IntegerField(
                        primary_key=True, serialize=False, verbose_name="流水编号"
                    ),
                ),
                ("order_id", models.IntegerField(verbose_name="订单编号")),
                (
                    "fin_type",
                    models.SmallIntegerField(default=0, verbose_name="财务类型"),
                ),
                (
                    "fin_status",
                    models.SmallIntegerField(default=0, verbose_name="当前状态"),
                ),
                ("create_time", models.DateTimeField(verbose_name="创建时间")),
                (
                    "processed_time",
                    models.DateTimeField(null=True, verbose_name="处理时间"),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="金额"
                    ),
                ),
                (
                    "create_username",
                    models.CharField(max_length=150, verbose_name="用户名"),
                ),
                ("create_name", models.CharField(max_length=20, verbose_name="姓名")),
                (
                    "process_username",
                    models.CharField(max_length=150, verbose_name="用户名"),
                ),
                ("process_name", models.CharField(max_length=20, verbose_name="姓名")),
            ],
            options={
                "verbose_name": "FinancialView",
                "verbose_name_plural": "FinancialView",
                "db_table": "view_financial",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OrderItemsView",
            fields=[
                (
                    "order_id",
                    models.IntegerField(
                        primary_key=True, serialize=False, verbose_name="订单编号"
                    ),
                ),
                ("book_id", models.IntegerField(verbose_name="书籍编号")),
                ("bookname", models.CharField(max_length=40, verbose_name="书名")),
                ("img", models.ImageField(upload_to="books/", verbose_name="封面")),
                ("quantity", models.IntegerField(verbose_name="数量")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="单价"
                    ),
                ),
                (
                    "inventory_location",
                    models.CharField(max_length=20, verbose_name="库存位置"),
                ),
            ],
            options={
                "verbose_name": "OrderItemsView",
                "verbose_name_plural": "OrderItemsView",
                "db_table": "view_order_items",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OrderStatusView",
            fields=[
                (
                    "order_id",
                    models.IntegerField(
                        primary_key=True, serialize=False, verbose_name="订单编号"
                    ),
                ),
                ("status", models.SmallIntegerField(verbose_name="订单状态")),
                (
                    "time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="时间"
                    ),
                ),
                ("username", models.CharField(max_length=150, verbose_name="用户名")),
                ("name", models.CharField(max_length=20, verbose_name="姓名")),
            ],
            options={
                "verbose_name": "OrderStatusView",
                "verbose_name_plural": "OrderStatusView",
                "db_table": "view_order_status",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Account",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_commonuser",
                    models.BooleanField(
                        default=False,
                        verbose_name="commonuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "work_id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="工号"
                    ),
                ),
                ("name", models.CharField(max_length=20, verbose_name="姓名")),
                (
                    "gender",
                    models.SmallIntegerField(
                        choices=[(0, "male"), (1, "female")],
                        default=0,
                        verbose_name="性别",
                    ),
                ),
                ("birthday", models.DateField(verbose_name="出生日期")),
                (
                    "avatar",
                    models.ImageField(
                        default="users/default.jpg",
                        upload_to="users/",
                        verbose_name="头像",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "账号",
                "verbose_name_plural": "账号",
                "db_table": "account",
            },
            managers=[
                ("objects", backend.models.NewUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "book_id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="书籍编号"
                    ),
                ),
                (
                    "ISBN",
                    models.CharField(max_length=16, unique=True, verbose_name="ISBN"),
                ),
                ("bookname", models.CharField(max_length=40, verbose_name="书名")),
                ("author", models.CharField(max_length=40, verbose_name="作者")),
                ("publisher", models.CharField(max_length=40, verbose_name="出版社")),
                (
                    "retail_price",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="零售价"
                    ),
                ),
                (
                    "genre",
                    models.CharField(
                        default="未分类", max_length=30, verbose_name="内容体裁"
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        default="平装", max_length=10, verbose_name="书籍格式"
                    ),
                ),
                (
                    "img",
                    models.ImageField(
                        default="books/default.jpeg",
                        upload_to="books/",
                        verbose_name="封面",
                    ),
                ),
            ],
            options={
                "verbose_name": "图书",
                "verbose_name_plural": "图书",
                "db_table": "book",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "order_id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="订单编号"
                    ),
                ),
                (
                    "order_type",
                    models.SmallIntegerField(
                        choices=[(0, "purchase"), (1, "sales")],
                        default=0,
                        verbose_name="订单类型",
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="时间"
                    ),
                ),
                (
                    "customer",
                    models.CharField(
                        blank=True, max_length=40, verbose_name="客户姓名"
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="金额"
                    ),
                ),
                ("note", models.CharField(max_length=40, verbose_name="备注")),
            ],
            options={
                "verbose_name": "订单",
                "verbose_name_plural": "订单",
                "db_table": "order",
            },
        ),
        migrations.CreateModel(
            name="Stock",
            fields=[
                (
                    "stock_id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="stock_id"
                    ),
                ),
                ("count", models.SmallIntegerField(verbose_name="库存数量")),
                (
                    "inventory_location",
                    models.CharField(max_length=20, verbose_name="库存位置"),
                ),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="backend.book"
                    ),
                ),
            ],
            options={
                "verbose_name": "库存",
                "verbose_name_plural": "库存",
                "db_table": "stock",
            },
        ),
        migrations.CreateModel(
            name="OrderStatusHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="时间"
                    ),
                ),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[
                            (-1, "error"),
                            (0, "waiting for payment"),
                            (1, "waiting for shipping"),
                            (2, "received refund request"),
                            (3, "received refund items"),
                            (4, "completed"),
                            (5, "refunded"),
                            (6, "closed"),
                        ],
                        default=0,
                        verbose_name="订单状态",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.order",
                        verbose_name="订单编号",
                    ),
                ),
                (
                    "work",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="操作用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "订单状态",
                "verbose_name_plural": "订单状态",
                "db_table": "order_status_history",
            },
        ),
        migrations.CreateModel(
            name="OrderItems",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.IntegerField(verbose_name="数量")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="单价"
                    ),
                ),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="backend.book",
                        verbose_name="书籍编号",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.order",
                        verbose_name="订单编号",
                    ),
                ),
            ],
            options={
                "verbose_name": "订单内容",
                "verbose_name_plural": "订单内容",
                "db_table": "order_items",
            },
        ),
        migrations.CreateModel(
            name="Financial",
            fields=[
                (
                    "fin_id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="流水编号"
                    ),
                ),
                (
                    "fin_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "purchase order payment"),
                            (1, "sales order payment"),
                            (2, "sales order refund"),
                        ],
                        default=0,
                        verbose_name="财务类型",
                    ),
                ),
                (
                    "fin_status",
                    models.SmallIntegerField(
                        choices=[(0, "pending"), (1, "processed"), (2, "closed")],
                        default=0,
                        verbose_name="当前状态",
                    ),
                ),
                (
                    "create_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="创建时间"
                    ),
                ),
                (
                    "processed_time",
                    models.DateTimeField(null=True, verbose_name="处理时间"),
                ),
                (
                    "create_work",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="finan_create",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建用户",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="backend.order",
                        verbose_name="订单编号",
                    ),
                ),
                (
                    "process_work",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="finan_process",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="操作用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "财务",
                "verbose_name_plural": "财务",
                "db_table": "financial",
            },
        ),
        migrations.RunSQL(
            "CREATE OR REPLACE VIEW view_books_in_stock AS "
            "SELECT stock.book_id, stock_id, count, inventory_location, `ISBN`, "
            "bookname, author, publisher, retail_price, genre , format, img "
            "FROM stock LEFT JOIN book USING(book_id);"
        ),
        migrations.RunSQL(
            "CREATE OR REPLACE VIEW view_books AS "
            "SELECT B.book_id, S.stock_id, S.count, S.inventory_location, B.`ISBN`, "
            "bookname, author, publisher, retail_price, genre , format, img "
            "FROM book B LEFT JOIN stock S USING(book_id);"
        ),
        migrations.RunSQL(
            "CREATE OR REPLACE VIEW view_order_items AS "
            "SELECT order_id, book_id, bookname, img, quantity, price, inventory_location "
            "FROM order_items LEFT JOIN book USING(book_id) LEFT JOIN stock USING(book_id);"
        ),
        migrations.RunSQL(
            "CREATE OR REPLACE VIEW view_order_status AS "
            "SELECT order_id, status, time, username, name "
            "FROM order_status_history LEFT JOIN account USING(work_id); "
        ),
        migrations.RunSQL(
            "CREATE OR REPLACE VIEW view_financial AS "
            "SELECT fin_id, order_id, fin_type, fin_status, financial.create_time, processed_time, EXTRACT(MONTH FROM financial.create_time) AS create_month,financial.create_work_id,"
            "amount, C.username AS create_username, C.name AS create_name, "
            " P.username AS process_username, P.name AS process_name "
            "FROM financial JOIN account C ON financial.create_work_id=C.work_id "
            "LEFT JOIN account P ON financial.process_work_id=P.work_id "
            "LEFT JOIN `order` USING(order_id); "
        ),
        migrations.RunSQL(
            """
            CREATE TRIGGER check_empty_stock
            AFTER UPDATE ON stock
            FOR EACH ROW
            BEGIN
                IF NEW.count = 0 THEN
                    DELETE FROM stock WHERE book_id = NEW.book_id;
                END IF;
            END;
        """
        ),
        migrations.RunSQL(
            """
            CREATE TRIGGER check_order_status
            BEFORE INSERT ON order_status_history
            FOR EACH ROW
            BEGIN
                DECLARE count INT;

                SELECT COUNT(*)
                INTO count
                FROM view_order_status
                WHERE order_id = NEW.order_id AND status = NEW.status;

                IF count > 0 THEN
                    SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Order status already exists';
                END IF;
            END;
        """
        ),
        migrations.RunSQL(
            """
            CREATE TRIGGER check_order_items
            BEFORE INSERT ON order_items
            FOR EACH ROW
            BEGIN
                DECLARE count INT;

                SELECT COUNT(*)
                INTO count
                FROM order_items
                WHERE order_id = NEW.order_id AND book_id = NEW.book_id;

                IF count > 0 THEN
                    SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Duplicate order item';
                END IF;
            END;
        """
        ),
        migrations.RunSQL(
            """
            CREATE TRIGGER check_financial
            BEFORE INSERT ON financial
            FOR EACH ROW
            BEGIN
                DECLARE count INT;

                SELECT COUNT(*)
                INTO count
                FROM financial
                WHERE order_id = NEW.order_id AND fin_type = NEW.fin_type;

                IF count > 0 THEN
                    SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Duplicate financial record';
                END IF;
            END;
        """
        ),
        # migrations.RunSQL('CREATE OR REPLACE FUNCTION check_empty_stock_function() '
        #                   'RETURNS TRIGGER '
        #                   'AS $$ '
        #                   'BEGIN '
        #                   'DELETE FROM stock '
        #                   'WHERE book_id=NEW.book_id; '
        #                   'RETURN NEW; '
        #                   'END; '
        #                   '$$ LANGUAGE plpgsql; '),
        # migrations.RunSQL('CREATE OR REPLACE TRIGGER check_empty_stock '
        #                   'AFTER UPDATE ON stock '
        #                   'FOR EACH ROW '
        #                   'WHEN (NEW.count=0) '
        #                   'EXECUTE FUNCTION check_empty_stock_function(); '
        #                   ),
        # migrations.RunSQL('CREATE OR REPLACE FUNCTION check_order_status_function()'
        #                   'RETURNS TRIGGER '
        #                   'AS $$ '
        #                   'BEGIN '
        #                   'IF EXISTS(SELECT * FROM view_order_status '
        #                   'WHERE order_id=NEW.order_id AND status=NEW.status) '
        #                   'THEN RETURN NULL; '
        #                   'ELSE '
        #                   'RETURN NEW; '
        #                   'END IF;'
        #                   'END; '
        #                   '$$ LANGUAGE plpgsql;'),
        # migrations.RunSQL('CREATE OR REPLACE TRIGGER check_order_status '
        #                   'BEFORE INSERT ON order_status_history '
        #                   'FOR EACH ROW '
        #                   'EXECUTE FUNCTION check_order_status_function(); '
        #                   ),
        # migrations.RunSQL('CREATE OR REPLACE FUNCTION check_order_items_function()'
        #                   'RETURNS TRIGGER '
        #                   'AS $$ '
        #                   'BEGIN '
        #                   'IF EXISTS(SELECT * FROM order_items '
        #                   'WHERE order_id=NEW.order_id AND book_id=NEW.book_id) '
        #                   'THEN RETURN NULL; '
        #                   'ELSE '
        #                   'RETURN NEW; '
        #                   'END IF;'
        #                   'END; '
        #                   '$$ LANGUAGE plpgsql;'),
        # migrations.RunSQL('CREATE OR REPLACE TRIGGER check_order_items '
        #                   'BEFORE INSERT ON order_items '
        #                   'FOR EACH ROW '
        #                   'EXECUTE FUNCTION check_order_items_function(); '
        #                   ),
        # migrations.RunSQL('CREATE OR REPLACE FUNCTION check_financial_function()'
        #                   'RETURNS TRIGGER '
        #                   'AS $$ '
        #                   'BEGIN '
        #                   'IF EXISTS(SELECT * FROM financial '
        #                   'WHERE order_id=NEW.order_id AND fin_type=NEW.fin_type) '
        #                   'THEN RETURN NULL; '
        #                   'ELSE '
        #                   'RETURN NEW; '
        #                   'END IF;'
        #                   'END; '
        #                   '$$ LANGUAGE plpgsql;'),
        # migrations.RunSQL('CREATE OR REPLACE TRIGGER check_financial '
        #                   'BEFORE INSERT ON financial '
        #                   'FOR EACH ROW '
        #                   'EXECUTE FUNCTION check_financial_function(); '
        #                   ),
    ]
